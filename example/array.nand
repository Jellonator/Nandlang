function index1(v1[8], v2[8], i : ret[8]) {
    if i {
        ret = v2;
    } else {
        ret = v1;
    }
}

function index2(v1[16], v2[16], i1, i2 : ret[8]) {
    if i1 {
        ret = index1(v2, i2);
    } else {
        ret = index1(v1, i2);
    }
}

function index3(v1[32], v2[32], i1, i2[2] : ret[8]) {
    if i1 {
        ret = index2(v2, i2);
    } else {
        ret = index2(v1, i2);
    }
}

function index4(v1[64], v2[64], i1, i2[3] : ret[8]) {
    if i1 {
        ret = index3(v2, i2);
    } else {
        ret = index3(v1, i2);
    }
}

function index5(v1[128], v2[128], i1, i2[4] : ret[8]) {
    if i1 {
        ret = index4(v2, i2);
    } else {
        ret = index4(v1, i2);
    }
}

function index6(v1[256], v2[256], i1, i2[5] : ret[8]) {
    if i1 {
        ret = index5(v2, i2);
    } else {
        ret = index5(v1, i2);
    }
}

function index7(v1[512], v2[512], i1, i2[6] : ret[8]) {
    if i1 {
        ret = index6(v2, i2);
    } else {
        ret = index6(v1, i2);
    }
}

function index8(v1[1024], v2[1024], i1, i2[7] : ret[8]) {
    if i1 {
        ret = index7(v2, i2);
    } else {
        ret = index7(v1, i2);
    }
}

function setindex1(v1[8], v2[8], i, value[8] : ret[16]) {
    if i {
        ret = v1, value;
    } else {
        ret = value, v2;
    }
}

function setindex2(v1[16], v2[16], i1, i2, value[8] : ret[32]) {
    if i1 {
        ret = v1, setindex1(v2, i2, value);
    } else {
        ret = setindex1(v1, i2, value), v2;
    }
}

function setindex3(v1[32], v2[32], i1, i2[2], value[8] : ret[64]) {
    if i1 {
        ret = v1, setindex2(v2, i2, value);
    } else {
        ret = setindex2(v1, i2, value), v2;
    }
}

function setindex4(v1[64], v2[64], i1, i2[3], value[8] : ret[128]) {
    if i1 {
        ret = v1, setindex3(v2, i2, value);
    } else {
        ret = setindex3(v1, i2, value), v2;
    }
}

function setindex5(v1[128], v2[128], i1, i2[4], value[8] : ret[256]) {
    if i1 {
        ret = v1, setindex4(v2, i2, value);
    } else {
        ret = setindex4(v1, i2, value), v2;
    }
}

function setindex6(v1[256], v2[256], i1, i2[5], value[8] : ret[512]) {
    if i1 {
        ret = v1, setindex5(v2, i2, value);
    } else {
        ret = setindex5(v1, i2, value), v2;
    }
}

function setindex7(v1[512], v2[512], i1, i2[6], value[8] : ret[1024]) {
    if i1 {
        ret = v1, setindex6(v2, i2, value);
    } else {
        ret = setindex6(v1, i2, value), v2;
    }
}

function setindex8(v1[1024], v2[1024], i1, i2[7], value[8] : ret[2048]) {
    if i1 {
        ret = v1, setindex7(v2, i2, value);
    } else {
        ret = setindex7(v1, i2, value), v2;
    }
}

function not(in : out) {
	out = in ! in;
}

function and(a, b : out) {
	out = not(a ! b);
}

function or(a, b : out) {
	out = not(a) ! not(b);
}

function xor(a, b : out) {
    out = or(and(a, not(b)), and(not(a), b));
}

function eq(a, b : out) {
	out = not(xor(a, b));
}

function add(a, b, cin : v, cout) {
	v = xor(cin, xor(a, b));
	cout = or(and(a, b), and(xor(a, b), cin));
}

function add8(a[8], b[8] : o[8]) {
    var c = 0;
    o[7], c = add(a[7], b[7], c);
    o[6], c = add(a[6], b[6], c);
    o[5], c = add(a[5], b[5], c);
    o[4], c = add(a[4], b[4], c);
    o[3], c = add(a[3], b[3], c);
    o[2], c = add(a[2], b[2], c);
    o[1], c = add(a[1], b[1], c);
    o[0], c = add(a[0], b[0], c);
}

function sub8(a[8], b[8] : o[8]) {
    o = add8(a, complement8(b));
}

function complement8(i[8] : o[8]) {
    o = add8(
        not(i[0]), not(i[1]), not(i[2]), not(i[3]),
        not(i[4]), not(i[5]), not(i[6]), not(i[7]),
        0, 0, 0, 0, 0, 0, 0, 1);
}

function equal8(a[8], b[8] : out) {
    out = and(
        and(and(eq(a[1], b[1]), eq(a[2], b[2])),
            and(eq(a[3], b[3]), eq(a[4], b[4]))),
        and(and(eq(a[5], b[5]), eq(a[6], b[6])),
            and(eq(a[7], b[7]), eq(a[0], b[0]))));
}

function zero(: ret[2048]) {}

function main()
{
    var index[8] = 0, 0, 0, 0, 0, 0, 0, 0;
    var memory[2048] = zero();
    while iogood() {
        var v[8] = getc();
        if not(equal8(v, 0, 0, 0, 0, 1, 0, 1, 0)) {
            memory = setindex8(memory, index, v);
            index = add8(index, 0, 0, 0, 0, 0, 0, 0, 1);
        }
    }
    while not(equal8(index, 0, 0, 0, 0, 0, 0, 0, 0)) {
        index = sub8(index, 0, 0, 0, 0, 0, 0, 0, 1);
        putc(index8(memory, index));
    }
    endl();
}
