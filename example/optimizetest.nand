function not(in : out) {
	out = in ! in;
}

function and(a, b : out) {
	out = not(a ! b);
}

function or(a, b : out) {
	out = not(a) ! not(b);
}

function eq(a, b : out) {
	out = not(xor(a, b));
}

function gr(a, b : out) {
	out = and(a, not(b));
}

function xor(a, b : out) {
	out = or(and(a, not(b)), and(not(a), b));
}

function add(a, b, cin : v, cout) {
	v = xor(cin, xor(a, b));
	cout = or(and(a, b), and(xor(a, b), cin));
}

function add8(a[8], b[8] : o[8]) {
    var c = 0;
    o[7], c = add(a[7], b[7], c);
    o[6], c = add(a[6], b[6], c);
    o[5], c = add(a[5], b[5], c);
    o[4], c = add(a[4], b[4], c);
    o[3], c = add(a[3], b[3], c);
    o[2], c = add(a[2], b[2], c);
    o[1], c = add(a[1], b[1], c);
    o[0], c = add(a[0], b[0], c);
}

function complement8(i[8] : o[8]) {
    o = add8(
        not(i[0]), not(i[1]), not(i[2]), not(i[3]),
        not(i[4]), not(i[5]), not(i[6]), not(i[7]),
        0, 0, 0, 0, 0, 0, 0, 1);
}

function sub8(a[8], b[8] : o[8]) {
    o = add8(a, complement8(b));
}

function eq8(a[8], b[8] : out) {
    out = and(
        and(and(eq(a[1], b[1]), eq(a[2], b[2])),
            and(eq(a[3], b[3]), eq(a[4], b[4]))),
        and(and(eq(a[5], b[5]), eq(a[6], b[6])),
            and(eq(a[7], b[7]), eq(a[0], b[0]))));
}

function gr8(a[8], b[8] : out) {
	// BEHOLD: the uggliest function ever written
	out =
		or(gr(a[0], b[0]), and(eq(a[0], b[0]),
		or(gr(a[1], b[1]), and(eq(a[1], b[1]),
		or(gr(a[2], b[2]), and(eq(a[2], b[2]),
		or(gr(a[3], b[3]), and(eq(a[3], b[3]),
		or(gr(a[4], b[4]), and(eq(a[4], b[4]),
		or(gr(a[5], b[5]), and(eq(a[5], b[5]),
		or(gr(a[6], b[6]), and(eq(a[6], b[6]),
		   gr(a[7], b[7])))))))))))))));
}

function ge8(a[8], b[8] : out) {
	out = or(gr8(a, b), eq8(a, b));
}

function divide8(a[8], b[8] : o[8]) {
	o = 0[8];
	while ge8(a, b) {
		o = add8(o, 1[8]);
		a = sub8(a, b);
	}
}

function multiply8(a[8], b[8] : o[8]) {
	// outputs must be initialized first.
	o = 0[8];
	while not(eq8(b, 0[8])) {
		// outputs can be re-assigned.
		o = add8(a, o);
		b = sub8(b, 1[8]);
	}
}

function mod8(a[8], b[8] : o[8]) {
	o = complement8(b);
	while ge8(a, b) {
		a = add8(a, o);
	}
	o = a;
}

function putmany(a[8], b[8], c[8])
{
    puti8(a);
    putc(' ');
    puti8(b);
    putc(' ');
    puti8(c);
    putc('\n');
}

function main()
{
    var i[8] = 0[8];
    while not(eq8(i, 100[8])) {
        var asdf[8] = divide8(96[8], 4[8]);
        putmany(mod8(76[8], 7[8]), asdf, multiply8(7[8], 12[8]));
        i = add8(i, 1[8]);
    }
}
